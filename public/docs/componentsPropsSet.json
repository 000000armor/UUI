{
  "props": {
    "D:/dev/UUI-develop/epam-promo/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18",
        "comment": "Button size"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light",
        "comment": "Fill style: solid (normal), light (washed color), white, or none (just button label is visible)"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50",
        "comment": "Button color"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/buttons/docs/iconButton.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50 | amber | gray30 | gray60"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/buttons/docs/linkButton.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/buttons/docs/tabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/buttons/docs/verticalTabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/datePickers/docs/datePicker.doc.tsx": [
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode",
        "comment": "render prop to add a custom footer inside the DatePicker dropdown body"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }",
        "comment": "HTML attributes to put on various elements of the component (input, body)"
      },
      {
        "name": "format",
        "value": "string",
        "comment": "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "Filter selectable days. Days, for which this callback returns false - will be disabled"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "Disable clearing date value (e.g. via cross icon)"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>",
        "comment": "Overrides rendering of the single day. For example, to highlight certain days"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "If this function returns true, the day will be highlighted as holiday"
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/datePickers/docs/rangeDatePicker.doc.tsx": [
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string"
      },
      {
        "name": "rawProps",
        "value": "{ from?: any; to?: any; body?: any; }"
      },
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/checkbox.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Check icon"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>",
        "comment": "Indeterminate state icon"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": "Checkbox size"
      },
      {
        "name": "theme",
        "value": "light | dark",
        "comment": "Set to 'dark' to make component work on a dark background"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/multiSwitch.doc.tsx": [
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]"
      },
      {
        "name": "color",
        "value": "blue | gray50"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/numericInput.doc.ts": [
      {
        "name": "max",
        "value": "number",
        "comment": "Maximum value (default is Number.MAX_SAFE_INTEGER)"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "Minimum value (default is 0)"
      },
      {
        "name": "upIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the up/increase icon"
      },
      {
        "name": "downIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the down/decrease icon"
      },
      {
        "name": "step",
        "value": "number",
        "comment": "Increase/decrease step (for icons and )"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS classes to put directly on the Input element"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID"
      },
      {
        "name": "disableArrows",
        "value": "boolean",
        "comment": "Turn off up/down (increase/decrease) buttons"
      },
      {
        "name": "align",
        "value": "left | right",
        "comment": "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
      },
      {
        "name": "disableLocaleFormatting",
        "value": "boolean",
        "comment": "Turns off locale-based formatting, standard Number.toString() is used instead"
      },
      {
        "name": "formatOptions",
        "value": "Intl.NumberFormatOptions",
        "comment": "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
      },
      {
        "name": "formatter",
        "value": "(value: number) => number",
        "comment": "[Obsolete]: Please rework this to change value in lens.onChange or onValueChange instead"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/radioInput.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "18 | 12"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/rating.doc.ts": [
      {
        "name": "filledStarIcon",
        "value": "any"
      },
      {
        "name": "emptyStarIcon",
        "value": "any"
      },
      {
        "name": "hideTooltip",
        "value": "boolean"
      },
      {
        "name": "hint",
        "value": "(value: number) => string"
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "from",
        "value": "number"
      },
      {
        "name": "to",
        "value": "number"
      },
      {
        "name": "step",
        "value": "1 | 0.5"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "18 | 24 | 30"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/searchInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>",
        "comment": "Overrides accept (check) icon"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>",
        "comment": "Overrides cancel (cross) icon"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Overrides dropdown (chevron) icon"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class(es) to put to the HTML Input element"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element",
        "comment": "overrides rendering of HTML Input element"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "Enables cancel (cross) icon, and fires when the icon is clicked"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "Enables accept (check) icon, and fires when the icon is clicked"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "keydown event handler to put on the HTML input element"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Put focus on the element, when component is mounted"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum input length in characters"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "Standard [autocomplete attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID attribute for input"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "Prefix to render before the input. Can be used to display in-place labels"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "Suffix to render after the input. Can be used to display unit or currency"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      },
      {
        "name": "disableDebounce",
        "value": "boolean",
        "comment": "Pass true to disable debouncing"
      },
      {
        "name": "debounceDelay",
        "value": "number",
        "comment": "Debounce delay in ms"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/switch.doc.ts": [
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/textArea.doc.ts": [
      {
        "name": "rows",
        "value": "number",
        "comment": "Adjust height to fit specified number or text rows. HTML TextArea attribute."
      },
      {
        "name": "autoSize",
        "value": "boolean",
        "comment": "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "onKeyDown event handler to put on HTML Input"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Automatically sets input focus to component, when its mounted"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class names to put to the HTML Input element"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum text length, in characters"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML id attribute to put on the HTML Input element"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>",
        "comment": "Overrides accept (check) icon"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>",
        "comment": "Overrides cancel (cross) icon"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Overrides dropdown (chevron) icon"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class(es) to put to the HTML Input element"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element",
        "comment": "overrides rendering of HTML Input element"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "Enables cancel (cross) icon, and fires when the icon is clicked"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "Enables accept (check) icon, and fires when the icon is clicked"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "keydown event handler to put on the HTML input element"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Put focus on the element, when component is mounted"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum input length in characters"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "Standard [autocomplete attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID attribute for input"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "Prefix to render before the input. Can be used to display in-place labels"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "Suffix to render after the input. Can be used to display unit or currency"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/inputs/docs/timePicker.doc.ts": [
      {
        "name": "minutesStep",
        "value": "number"
      },
      {
        "name": "format",
        "value": "24 | 12"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/accordion.doc.tsx": [
      {
        "name": "title",
        "value": "string"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpened: boolean) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "mode",
        "value": "block | inline",
        "comment": "'block' mode: render as separate panel (with padding, borders, shadows). 'inline' mode - renders no outside panel, suitable for placing in a panel with other components"
      },
      {
        "name": "padding",
        "value": "18 | 12 | 0 | 6"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/blocker.doc.ts": [
      {
        "name": "isEnabled",
        "value": "boolean",
        "comment": "Turns the blocker on or off"
      },
      {
        "name": "hideSpinner",
        "value": "boolean",
        "comment": "Disables spinner animation display"
      },
      {
        "name": "spacerHeight",
        "value": "number",
        "comment": "Sets the minimal height in px, for cases when blocked content is empty"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode",
        "comment": "Replaces default spinner"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/checkboxGroup.doc.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/controlGroup.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/iconContainer.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon to display"
      },
      {
        "name": "flipY",
        "value": "boolean",
        "comment": "Flips the icon vertically"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw",
        "comment": "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void",
        "comment": "Click handler"
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "CSS style prop to put on the component"
      },
      {
        "name": "size",
        "value": "number",
        "comment": "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "color",
        "value": "white | blue | green | red | gray50 | amber | gray30 | gray60 | gray5 | gray10 | gray20 | gray40 | gray70 | gray80 | gray90 | cyan | orange | purple | violet",
        "comment": "Component's base color"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/labeledInput.doc.tsx": [
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": "Overrides the default Tooltip component to use for info tooltip"
      },
      {
        "name": "infoIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the default info icon"
      },
      {
        "name": "labelPosition",
        "value": "left | top",
        "comment": "Position of the label, relative to the wrapped component (top of left)"
      },
      {
        "name": "info",
        "value": "string",
        "comment": "Info hint text to show in tooltip"
      },
      {
        "name": "isOptional",
        "value": "boolean",
        "comment": "Marks related field as optional"
      },
      {
        "name": "htmlFor",
        "value": "string",
        "comment": "HTML 'for' tag to bind the label to a component.\r\nCan be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/docs/radioGroup.doc.ts": [
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]"
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.ReactText; }"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/navigation/docs/anchor.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/navigation/docs/mainMenu.doc.tsx": [
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "externalGap",
        "value": "number"
      },
      {
        "name": "appLogoUrl",
        "value": "string"
      },
      {
        "name": "appLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoUrl",
        "value": "string"
      },
      {
        "name": "customerLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoWidth",
        "value": "number"
      },
      {
        "name": "isTransparent",
        "value": "boolean"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "alwaysShowBurger",
        "value": "boolean"
      },
      {
        "name": "serverBadge",
        "value": "string"
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode"
      },
      {
        "name": "logoLink",
        "value": "Link"
      },
      {
        "name": "logoHref",
        "value": "string"
      },
      {
        "name": "logoWidth",
        "value": "number"
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      {
        "name": "customerLogoLink",
        "value": "Link"
      },
      {
        "name": "customerLogoHref",
        "value": "string"
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>"
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/alert.doc.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]",
        "comment": "List of actions to display in the alert. Each action has name and 'action' callback"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber",
        "comment": "Alert color"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "An optional icon to show on the left of the alert"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/dropdown.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/dropdownContainer.doc.tsx": [
      {
        "name": "width",
        "value": "auto"
      },
      {
        "name": "maxWidth",
        "value": "number"
      },
      {
        "name": "height",
        "value": "number"
      },
      {
        "name": "showArrow",
        "value": "boolean"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "togglerWidth",
        "value": "number"
      },
      {
        "name": "togglerHeight",
        "value": "number"
      },
      {
        "name": "scheduleUpdate",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "arrowProps",
        "value": "PopperArrowProps"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "vPadding",
        "value": "24 | 30 | 48 | 18 | 12 | 6"
      },
      {
        "name": "padding",
        "value": "24 | 30 | 18 | 12 | 6"
      },
      {
        "name": "color",
        "value": "white | gray70"
      },
      {
        "name": "ref",
        "value": "React.Ref<T>"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/modalFooter.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "borderTop",
        "value": "boolean"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/modalHeader.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "onClose",
        "value": "() => any"
      },
      {
        "name": "title",
        "value": "React.ReactNode"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/notificationCard.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray60"
      },
      {
        "name": "actions",
        "value": "NotificationAction[]"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/overlays/docs/tooltip.doc.tsx": [
      {
        "name": "content",
        "value": "any",
        "comment": "Content to show in the tooltip (ReactNode)"
      },
      {
        "name": "renderContent",
        "value": "() => any",
        "comment": "Alternative to 'content' prop, you can pass a render function.\r\nThe function will only be called when content is shown, this can save performance."
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "Placement of the tooltip relative to the wrapped component"
      },
      {
        "name": "trigger",
        "value": "click | press | hover | manual",
        "comment": "Defines when to show the tooltip: 'hover' - default and usual, 'press' - only when mouse button is down, 'manual' - visibility is controlled with isVisible prop"
      },
      {
        "name": "isVisible",
        "value": "boolean",
        "comment": "Is tooltip visible (for trigger='manual')"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": "Overrides React Portal target to use"
      },
      {
        "name": "offset",
        "value": "Offset",
        "comment": "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": "React Node(s) to show tooltip for"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": "See  [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/prevent-overflow/}"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "color",
        "value": "white | red | gray90"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/pickers/docs/pickerModal.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "initialValue",
        "value": "TId"
      },
      {
        "name": "isActive",
        "value": "boolean"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "success",
        "value": "(result: TResult) => void"
      },
      {
        "name": "abort",
        "value": "() => void"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disables component"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/tables/docs/dataTableCell.doc.tsx": [
      {
        "name": "rowProps",
        "value": "DataRowProps<TItem, TId>"
      },
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "role",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/tables/docs/dataTableHeaderCell.doc.tsx": [
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "isFilterActive",
        "value": "boolean"
      },
      {
        "name": "sortDirection",
        "value": "desc | asc"
      },
      {
        "name": "onSort",
        "value": "(dir: SortDirection) => void"
      },
      {
        "name": "onDrop",
        "value": "(params: DataColumnProps<TItem, TId, any>>) => void"
      },
      {
        "name": "renderFilter",
        "value": "(dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "normal | upper"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/tables/docs/dataTableHeaderRow.doc.tsx": [
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "onConfigButtonClick",
        "value": "(params: DataTableConfigModalParams) => any"
      },
      {
        "name": "renderCell",
        "value": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderConfigButton",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "normal | upper"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/tables/docs/dataTableRow.doc.tsx": [
      {
        "name": "renderCell",
        "value": "(props: DataTableCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderDropMarkers",
        "value": "(props: DndActorRenderParams) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked\nHandles row click.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "checkbox",
        "value": "{ isVisible: boolean; } & ICanBeInvalid"
      },
      {
        "name": "isSelectable",
        "value": "boolean"
      },
      {
        "name": "dnd",
        "value": "IDndActor<any, any>"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "id",
        "value": "TId",
        "comment": "ID of the TItem rows displays"
      },
      {
        "name": "rowKey",
        "value": "string",
        "comment": "Key of the TItem row displays. This is the ID converted to string.\r\nWe use this internally to identify rows, and hold rows them in various hash-tables.\r\nID can't be used for this, as it is not guaranteed to be comparable. E.g. one can use TID=[int, string] to hold composite IDs."
      },
      {
        "name": "index",
        "value": "number",
        "comment": "Index of the row, from the top of the list. This doesn't account any hierarchy."
      },
      {
        "name": "value",
        "value": "TItem",
        "comment": "The data item (TItem) row displays. Will be undefined if isLoading = true."
      },
      {
        "name": "parentId",
        "value": "TId",
        "comment": "ID of the parent TItem"
      },
      {
        "name": "path",
        "value": "DataRowPathItem<TId, TItem>[]",
        "comment": "Hierarchical path from the root node to the item (excluding the item itself)"
      },
      {
        "name": "depth",
        "value": "number",
        "comment": "Depth of the row in tree, 0 for the top-level"
      },
      {
        "name": "indent",
        "value": "number",
        "comment": "Indent of the item, to show hierarchy"
      },
      {
        "name": "isLoading",
        "value": "boolean",
        "comment": "True if row is in loading state. Value is empty in this case"
      },
      {
        "name": "isFoldable",
        "value": "boolean",
        "comment": "True if row contains children and so it can be folded or unfolded"
      },
      {
        "name": "isFolded",
        "value": "boolean",
        "comment": "True if row is currently unfolded"
      },
      {
        "name": "isChecked",
        "value": "boolean",
        "comment": "True if row is checked with checkbox"
      },
      {
        "name": "isCheckable",
        "value": "boolean",
        "comment": "True if row has checkbox and can be checkable"
      },
      {
        "name": "isChildrenChecked",
        "value": "boolean",
        "comment": "True if some of row's children are checked.\r\nUsed to show 'indefinite' checkbox state, to show user that something inside is checked"
      },
      {
        "name": "isSelected",
        "value": "boolean",
        "comment": "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
      },
      {
        "name": "isChildrenSelected",
        "value": "boolean",
        "comment": "True if any of row's children is selected."
      },
      {
        "name": "isFocused",
        "value": "boolean",
        "comment": "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
      },
      {
        "name": "isLastChild",
        "value": "boolean",
        "comment": "True if row is the last child of his parent"
      },
      {
        "name": "onFold",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row folding change.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onCheck",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row checkbox change.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onSelect",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row selection.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onFocus",
        "value": "(focusedIndex: number) => void",
        "comment": "Handles row focusing.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "borderBottom",
        "value": "none | gray30"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/typography/docs/richTextView.doc.tsx": [
      {
        "name": "htmlContent",
        "value": "any"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/typography/docs/text.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-italic | museo-sans | museo-slab"
      },
      {
        "name": "color",
        "value": "gray60 | gray5 | gray80 | gray90"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "24 | 18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number",
        "comment": "Number of fake 'words to show"
      },
      {
        "name": "color",
        "value": "gray10 | gray40",
        "comment": "Placeholder's color"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean",
        "comment": "Disables animation"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/avatar.doc.tsx": [
      {
        "name": "alt",
        "value": "string"
      },
      {
        "name": "img",
        "value": "string"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "onClick",
        "value": "() => void"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/avatarStack.doc.tsx": [
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144"
      },
      {
        "name": "urlArray",
        "value": "string[]"
      },
      {
        "name": "direction",
        "value": "left | right"
      },
      {
        "name": "avatarsCount",
        "value": "number"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/badge.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "fill",
        "value": "solid | transparent | semitransparent"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray30 | cyan | orange | purple | violet"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/paginator.doc.tsx": [
      {
        "name": "size",
        "value": "24 | 30"
      },
      {
        "name": "totalPages",
        "value": "number"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/spinner.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | blue | gray50"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/widgets/docs/tag.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "shape",
        "value": "square | round"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/buttons/docs/iconButton.doc.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/buttons/docs/linkButton.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/buttons/docs/tabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/buttons/docs/verticalTabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/datePickers/docs/calendar.doc.ts": [
      {
        "name": "value",
        "value": "TSelection"
      },
      {
        "name": "onValueChange",
        "value": "(day: Dayjs) => void"
      },
      {
        "name": "displayedDate",
        "value": "Dayjs"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "hideAnotherMonths",
        "value": "boolean"
      },
      {
        "name": "getDayCX",
        "value": "(day: Dayjs) => any"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/datePickers/docs/datePicker.doc.tsx": [
      {
        "name": "format",
        "value": "string",
        "comment": "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "Filter selectable days. Days, for which this callback returns false - will be disabled"
      },
      {
        "name": "renderTarget",
        "value": "(props: any) => React.ReactNode",
        "comment": "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
      },
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "Disable clearing date value (e.g. via cross icon)"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>",
        "comment": "Overrides rendering of the single day. For example, to highlight certain days"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "If this function returns true, the day will be highlighted as holiday"
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/datePickers/docs/rangeDatePicker.doc.tsx": [
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string"
      },
      {
        "name": "rawProps",
        "value": "{ from?: any; to?: any; body?: any; }"
      },
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/checkbox.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Check icon"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>",
        "comment": "Indeterminate state icon"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/multiSwitch.doc.tsx": [
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]"
      },
      {
        "name": "color",
        "value": "sky | night600"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/numericInput.doc.ts": [
      {
        "name": "max",
        "value": "number",
        "comment": "Maximum value (default is Number.MAX_SAFE_INTEGER)"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "Minimum value (default is 0)"
      },
      {
        "name": "upIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the up/increase icon"
      },
      {
        "name": "downIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the down/decrease icon"
      },
      {
        "name": "step",
        "value": "number",
        "comment": "Increase/decrease step (for icons and )"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS classes to put directly on the Input element"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID"
      },
      {
        "name": "disableArrows",
        "value": "boolean",
        "comment": "Turn off up/down (increase/decrease) buttons"
      },
      {
        "name": "align",
        "value": "left | right",
        "comment": "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
      },
      {
        "name": "disableLocaleFormatting",
        "value": "boolean",
        "comment": "Turns off locale-based formatting, standard Number.toString() is used instead"
      },
      {
        "name": "formatOptions",
        "value": "Intl.NumberFormatOptions",
        "comment": "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
      },
      {
        "name": "formatter",
        "value": "(value: number) => number",
        "comment": "[Obsolete]: Please rework this to change value in lens.onChange or onValueChange instead"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/radioInput.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "color",
        "value": "ColorMod"
      },
      {
        "name": "theme",
        "value": "light | dark"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/rating.doc.ts": [
      {
        "name": "filledStarIcon",
        "value": "any"
      },
      {
        "name": "emptyStarIcon",
        "value": "any"
      },
      {
        "name": "hideTooltip",
        "value": "boolean"
      },
      {
        "name": "hint",
        "value": "(value: number) => string"
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "from",
        "value": "number"
      },
      {
        "name": "to",
        "value": "number"
      },
      {
        "name": "step",
        "value": "1 | 0.5"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "size",
        "value": "18 | 24 | 30"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/searchInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>",
        "comment": "Overrides accept (check) icon"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>",
        "comment": "Overrides cancel (cross) icon"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Overrides dropdown (chevron) icon"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class(es) to put to the HTML Input element"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element",
        "comment": "overrides rendering of HTML Input element"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "Enables cancel (cross) icon, and fires when the icon is clicked"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "Enables accept (check) icon, and fires when the icon is clicked"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "keydown event handler to put on the HTML input element"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Put focus on the element, when component is mounted"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum input length in characters"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "Standard [autocomplete attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID attribute for input"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "Prefix to render before the input. Can be used to display in-place labels"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "Suffix to render after the input. Can be used to display unit or currency"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "disableDebounce",
        "value": "boolean",
        "comment": "Pass true to disable debouncing"
      },
      {
        "name": "debounceDelay",
        "value": "number",
        "comment": "Debounce delay in ms"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/sliderRating.doc.tsx": [
      {
        "name": "renderTooltip",
        "value": "(value: TValue) => React.ReactNode"
      },
      {
        "name": "from",
        "value": "1 | 2"
      },
      {
        "name": "withoutNa",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "24 | 18"
      },
      {
        "name": "getScaleIcon",
        "value": "(value: number) => React.FC<any>"
      },
      {
        "name": "getHandlerIcon",
        "value": "(value: number) => React.FC<any>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/switch.doc.ts": [
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/textArea.doc.ts": [
      {
        "name": "rows",
        "value": "number",
        "comment": "Adjust height to fit specified number or text rows. HTML TextArea attribute."
      },
      {
        "name": "autoSize",
        "value": "boolean",
        "comment": "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "onKeyDown event handler to put on HTML Input"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Automatically sets input focus to component, when its mounted"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class names to put to the HTML Input element"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum text length, in characters"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML id attribute to put on the HTML Input element"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>",
        "comment": "Overrides accept (check) icon"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>",
        "comment": "Overrides cancel (cross) icon"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Overrides dropdown (chevron) icon"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class(es) to put to the HTML Input element"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element",
        "comment": "overrides rendering of HTML Input element"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "Enables cancel (cross) icon, and fires when the icon is clicked"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "Enables accept (check) icon, and fires when the icon is clicked"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "keydown event handler to put on the HTML input element"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Put focus on the element, when component is mounted"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum input length in characters"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "Standard [autocomplete attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID attribute for input"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "Prefix to render before the input. Can be used to display in-place labels"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "Suffix to render after the input. Can be used to display unit or currency"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/docs/timePicker.doc.ts": [
      {
        "name": "minutesStep",
        "value": "number"
      },
      {
        "name": "format",
        "value": "24 | 12"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/accordion.doc.tsx": [
      {
        "name": "title",
        "value": "string"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpened: boolean) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "mode",
        "value": "block | inline"
      },
      {
        "name": "padding",
        "value": "18 | 12 | 0 | 6"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/blocker.doc.ts": [
      {
        "name": "isEnabled",
        "value": "boolean",
        "comment": "Turns the blocker on or off"
      },
      {
        "name": "hideSpinner",
        "value": "boolean",
        "comment": "Disables spinner animation display"
      },
      {
        "name": "spacerHeight",
        "value": "number",
        "comment": "Sets the minimal height in px, for cases when blocked content is empty"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode",
        "comment": "Replaces default spinner"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/checkboxGroup.doc.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/controlGroup.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/iconContainer.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon to display"
      },
      {
        "name": "flipY",
        "value": "boolean",
        "comment": "Flips the icon vertically"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw",
        "comment": "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void",
        "comment": "Click handler"
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "CSS style prop to put on the component"
      },
      {
        "name": "size",
        "value": "number",
        "comment": "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/labeledInput.doc.tsx": [
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": "Overrides the default Tooltip component to use for info tooltip"
      },
      {
        "name": "infoIcon",
        "value": "React.FC<any>",
        "comment": "Overrides the default info icon"
      },
      {
        "name": "labelPosition",
        "value": "left | top",
        "comment": "Position of the label, relative to the wrapped component (top of left)"
      },
      {
        "name": "info",
        "value": "string",
        "comment": "Info hint text to show in tooltip"
      },
      {
        "name": "isOptional",
        "value": "boolean",
        "comment": "Marks related field as optional"
      },
      {
        "name": "htmlFor",
        "value": "string",
        "comment": "HTML 'for' tag to bind the label to a component.\r\nCan be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/docs/radioGroup.doc.ts": [
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]"
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.ReactText; }"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/navigation/docs/mainMenu.doc.tsx": [
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "externalGap",
        "value": "number"
      },
      {
        "name": "appLogoUrl",
        "value": "string"
      },
      {
        "name": "appLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoUrl",
        "value": "string"
      },
      {
        "name": "customerLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoWidth",
        "value": "number"
      },
      {
        "name": "isTransparent",
        "value": "boolean"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "alwaysShowBurger",
        "value": "boolean"
      },
      {
        "name": "serverBadge",
        "value": "string"
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode"
      },
      {
        "name": "logoLink",
        "value": "Link"
      },
      {
        "name": "logoHref",
        "value": "string"
      },
      {
        "name": "logoWidth",
        "value": "number"
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      {
        "name": "customerLogoLink",
        "value": "Link"
      },
      {
        "name": "customerLogoHref",
        "value": "string"
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>"
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/alert.doc.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]"
      },
      {
        "name": "color",
        "value": "sky | grass | sun | fire"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/dropdown.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component\nDisables component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/dropdownContainer.doc.tsx": [
      {
        "name": "width",
        "value": "auto"
      },
      {
        "name": "maxWidth",
        "value": "number"
      },
      {
        "name": "height",
        "value": "number"
      },
      {
        "name": "showArrow",
        "value": "boolean"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "togglerWidth",
        "value": "number"
      },
      {
        "name": "togglerHeight",
        "value": "number"
      },
      {
        "name": "scheduleUpdate",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "arrowProps",
        "value": "PopperArrowProps"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "vPadding",
        "value": "24 | 30 | 48 | 18 | 12 | 6"
      },
      {
        "name": "padding",
        "value": "24 | 30 | 18 | 12 | 6"
      },
      {
        "name": "color",
        "value": "white | night700"
      },
      {
        "name": "ref",
        "value": "React.Ref<T>"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/dropdownMenu.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component\nDisables component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/dropdownMenuButton.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component\nDisables component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/modalFooter.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "borderTop",
        "value": "boolean"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/modalHeader.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "onClose",
        "value": "() => any"
      },
      {
        "name": "title",
        "value": "React.ReactNode"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/notificationCard.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "actions",
        "value": "NotificationAction[]"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/snackbarCard.doc.tsx": [
      {
        "name": "snackType",
        "value": "info | success | warning | danger"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/overlays/docs/tooltip.doc.tsx": [
      {
        "name": "content",
        "value": "any",
        "comment": "Content to show in the tooltip (ReactNode)"
      },
      {
        "name": "renderContent",
        "value": "() => any",
        "comment": "Alternative to 'content' prop, you can pass a render function.\r\nThe function will only be called when content is shown, this can save performance."
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "Placement of the tooltip relative to the wrapped component"
      },
      {
        "name": "trigger",
        "value": "click | press | hover | manual",
        "comment": "Defines when to show the tooltip: 'hover' - default and usual, 'press' - only when mouse button is down, 'manual' - visibility is controlled with isVisible prop"
      },
      {
        "name": "isVisible",
        "value": "boolean",
        "comment": "Is tooltip visible (for trigger='manual')"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": "Overrides React Portal target to use"
      },
      {
        "name": "offset",
        "value": "Offset",
        "comment": "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": "React Node(s) to show tooltip for"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": "See  [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/prevent-overflow/}"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/pickers/docs/pickerList.doc.tsx": [
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "renderModalToggler",
        "value": "(props: DataRowProps<TItem, TId>[]) => React.ReactNode"
      },
      {
        "name": "noOptionsMessage",
        "value": "React.ReactNode"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "maxDefaultItems",
        "value": "number",
        "comment": "Number of default items to show initially, when nothing is selected.\r\nDefault it 10 items"
      },
      {
        "name": "maxTotalItems",
        "value": "number",
        "comment": "Maximum total number of items to show, including selected"
      },
      {
        "name": "defaultIds",
        "value": "TId[]",
        "comment": "Ids of items to show first.\r\nIf not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
      },
      {
        "name": "settingsKey",
        "value": "string",
        "comment": "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/pickers/docs/pickerModal.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "initialValue",
        "value": "TId"
      },
      {
        "name": "isActive",
        "value": "boolean"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "success",
        "value": "(result: TResult) => void"
      },
      {
        "name": "abort",
        "value": "() => void"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disables component"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/tables/docs/dataTableCell.doc.tsx": [
      {
        "name": "rowProps",
        "value": "DataRowProps<TItem, TId>"
      },
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "role",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/tables/docs/dataTableHeaderCell.doc.tsx": [
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "isFilterActive",
        "value": "boolean"
      },
      {
        "name": "sortDirection",
        "value": "desc | asc"
      },
      {
        "name": "onSort",
        "value": "(dir: SortDirection) => void"
      },
      {
        "name": "onDrop",
        "value": "(params: DataColumnProps<TItem, TId, any>>) => void"
      },
      {
        "name": "renderFilter",
        "value": "(dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "normal | upper"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/tables/docs/dataTableHeaderRow.doc.tsx": [
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "onConfigButtonClick",
        "value": "(params: DataTableConfigModalParams) => any"
      },
      {
        "name": "renderCell",
        "value": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderConfigButton",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "normal | upper"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/tables/docs/dataTableRow.doc.tsx": [
      {
        "name": "renderCell",
        "value": "(props: DataTableCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderDropMarkers",
        "value": "(props: DndActorRenderParams) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked\nHandles row click.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "checkbox",
        "value": "{ isVisible: boolean; } & ICanBeInvalid"
      },
      {
        "name": "isSelectable",
        "value": "boolean"
      },
      {
        "name": "dnd",
        "value": "IDndActor<any, any>"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "id",
        "value": "TId",
        "comment": "ID of the TItem rows displays"
      },
      {
        "name": "rowKey",
        "value": "string",
        "comment": "Key of the TItem row displays. This is the ID converted to string.\r\nWe use this internally to identify rows, and hold rows them in various hash-tables.\r\nID can't be used for this, as it is not guaranteed to be comparable. E.g. one can use TID=[int, string] to hold composite IDs."
      },
      {
        "name": "index",
        "value": "number",
        "comment": "Index of the row, from the top of the list. This doesn't account any hierarchy."
      },
      {
        "name": "value",
        "value": "TItem",
        "comment": "The data item (TItem) row displays. Will be undefined if isLoading = true."
      },
      {
        "name": "parentId",
        "value": "TId",
        "comment": "ID of the parent TItem"
      },
      {
        "name": "path",
        "value": "DataRowPathItem<TId, TItem>[]",
        "comment": "Hierarchical path from the root node to the item (excluding the item itself)"
      },
      {
        "name": "depth",
        "value": "number",
        "comment": "Depth of the row in tree, 0 for the top-level"
      },
      {
        "name": "indent",
        "value": "number",
        "comment": "Indent of the item, to show hierarchy"
      },
      {
        "name": "isLoading",
        "value": "boolean",
        "comment": "True if row is in loading state. Value is empty in this case"
      },
      {
        "name": "isFoldable",
        "value": "boolean",
        "comment": "True if row contains children and so it can be folded or unfolded"
      },
      {
        "name": "isFolded",
        "value": "boolean",
        "comment": "True if row is currently unfolded"
      },
      {
        "name": "isChecked",
        "value": "boolean",
        "comment": "True if row is checked with checkbox"
      },
      {
        "name": "isCheckable",
        "value": "boolean",
        "comment": "True if row has checkbox and can be checkable"
      },
      {
        "name": "isChildrenChecked",
        "value": "boolean",
        "comment": "True if some of row's children are checked.\r\nUsed to show 'indefinite' checkbox state, to show user that something inside is checked"
      },
      {
        "name": "isSelected",
        "value": "boolean",
        "comment": "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
      },
      {
        "name": "isChildrenSelected",
        "value": "boolean",
        "comment": "True if any of row's children is selected."
      },
      {
        "name": "isFocused",
        "value": "boolean",
        "comment": "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
      },
      {
        "name": "isLastChild",
        "value": "boolean",
        "comment": "True if row is the last child of his parent"
      },
      {
        "name": "onFold",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row folding change.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onCheck",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row checkbox change.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onSelect",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void",
        "comment": "Handles row selection.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "onFocus",
        "value": "(focusedIndex: number) => void",
        "comment": "Handles row focusing.\r\nWe demand to pass the row as well, to avoid creating closures for each row."
      },
      {
        "name": "borderBottom",
        "value": "none | night300"
      },
      {
        "name": "background",
        "value": "none | white | night50"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/typography/docs/richTextView.doc.tsx": [
      {
        "name": "htmlContent",
        "value": "any"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/typography/docs/text.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/avatar.doc.tsx": [
      {
        "name": "alt",
        "value": "string"
      },
      {
        "name": "img",
        "value": "string"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "onClick",
        "value": "() => void"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/avatarStack.doc.tsx": [
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144"
      },
      {
        "name": "urlArray",
        "value": "string[]"
      },
      {
        "name": "direction",
        "value": "left | right"
      },
      {
        "name": "avatarsCount",
        "value": "number"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/badge.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "shape",
        "value": "square | round"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light | transparent | semitransparent"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 12"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/carousel.doc.tsx": [
      {
        "name": "items",
        "value": "Record<string, any>[]"
      },
      {
        "name": "renderItem",
        "value": "(item: Record<string, any>) => React.ReactNode"
      },
      {
        "name": "divideBy",
        "value": "number"
      },
      {
        "name": "arrowIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/paginator.doc.tsx": [
      {
        "name": "size",
        "value": "24 | 30"
      },
      {
        "name": "totalPages",
        "value": "number"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/spinner.doc.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/widgets/docs/tag.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "mode",
        "value": "none | solid | outline | ghost"
      },
      {
        "name": "color",
        "value": "accent | primary | secondary | negative"
      }
    ],
    "/components/buttons/docs/linkButton.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>",
        "comment": "Icon for clear value button (usually cross)"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "CSS classes to put on the caption"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Icon for drop-down toggler"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "Position of the dropdown icon ('left' of 'right')"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "Link object to redirect to for SPA-redirects"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "Href (URL) to redirect to, for non-SPA redirects"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "Controls where the link should be opened"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "/components/inputs/docs/checkbox.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Check icon"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>",
        "comment": "Indeterminate state icon"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      }
    ],
    "/components/inputs/docs/radioInput.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "size",
        "value": "18 | 12"
      }
    ],
    "/components/inputs/docs/switch.doc.ts": [
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      }
    ],
    "/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>",
        "comment": "Overrides accept (check) icon"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>",
        "comment": "Overrides cancel (cross) icon"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>",
        "comment": "Overrides dropdown (chevron) icon"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "CSS class(es) to put to the HTML Input element"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element",
        "comment": "overrides rendering of HTML Input element"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "Enables cancel (cross) icon, and fires when the icon is clicked"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "Enables accept (check) icon, and fires when the icon is clicked"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "keydown event handler to put on the HTML input element"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "Put focus on the element, when component is mounted"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "Maximum input length in characters"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "Standard [autocomplete attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "HTML ID attribute for input"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "Prefix to render before the input. Can be used to display in-place labels"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "Suffix to render after the input. Can be used to display unit or currency"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "Controls the order of keyboard navigation between components"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "Called when component's value is changed. Should return an analytics event to send via the AnalyticsContext"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "When component acts as dropdown, indicate that dropdown is open"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "Enabled dropdown mode - component can toggle dropdown"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "Called when associated dropdown should open or close"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "Called when component is interacted outside, to close the dropdown"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "Component's ref"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disables component"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "Placeholder to display when empty"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component gets input focus"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void",
        "comment": "Called when component looses input focus"
      },
      {
        "name": "icon",
        "value": "React.FC<any>",
        "comment": "Icon can be an React element (usually an SVG element)"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "Position of the icon (left of right)"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "Click handler for the icon"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/FlexItems/docs/flexRow.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      }
    ],
    "D:/dev/UUI-develop/epam-promo/components/layout/FlexItems/docs/panel.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "shadow",
        "value": "boolean"
      },
      {
        "name": "margin",
        "value": "\"24\""
      },
      {
        "name": "background",
        "value": "white | gray90"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/Slider/docs/rangeSlider.doc.ts": [
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "splitAt",
        "value": "number"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string"
      },
      {
        "name": "showTooltip",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/inputs/Slider/docs/slider.doc.ts": [
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "splitAt",
        "value": "number"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string"
      },
      {
        "name": "showTooltip",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "The current value of component"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "Called when value needs to be changed (usually due to user interaction)"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "True if component contains invalid input"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "Message describing why the value is invalid"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "If T is a complex value (object or array), this property contains validation states of inner items"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "Disable editing, and visually de-emphasize value of the component"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "Disable editing. Unlike isDisabled, keep component's value readable."
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "Marks that component's value is required"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/FlexItems/docs/flexRow.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      }
    ],
    "D:/dev/UUI-develop/loveship/components/layout/FlexItems/docs/panel.doc.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "Called when component is clicked"
      },
      {
        "name": "rawProps",
        "value": "any",
        "comment": "Any HTML attributes (native or 'data-') to put on the underlying component"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "this ref is passed to the underlying component"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "An analytics event to send (via AnalyticsContext) when component is clicked"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "shadow",
        "value": "boolean"
      },
      {
        "name": "margin",
        "value": "\"24\""
      },
      {
        "name": "background",
        "value": "white | night50"
      }
    ]
  }
}